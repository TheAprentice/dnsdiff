#!/usr/bin/env python3

import argparse
import dns.zone, dns.query
import os.path
import socket
import sys
import traceback

from random import randint
from time import sleep

VERSION='v1.0'

COLOR = {
    'cyan':'\033[0;36m',
    'green':'\033[0;32m',
    'red':'\033[0;31m',
    'reset':'\033[0m'
}

def get_dns_response(query, ns_addr, ns_name, rname, rdtype):
    # We need both ns_hostname and ns as PTR record may not match
    successful = False
    t = 2

    while not successful:
        try:
            response = dns.query.udp(query, ns_addr, timeout=t)
            successful = True
        except dns.exception.Timeout:
            # Retry query three times with exponentially larger timeout
            # before finally aborting
            if t <= 8:
                t = t*2
                continue
            else:
                if color_enabled:
                    sys.stderr.write("%s@@ SERVFAIL after 3 retries from %s for %s %s @@\n%s" %
                                     (COLOR['cyan'], ns_name, rname, rdtype,
                                      COLOR['reset']))
                else:
                    sys.stderr.write("@@ SERVFAIL after 3 retries from %s for %s %s @@\n" %
                                     (ns_hostname, rname, rdtype))
        return response

def added(answer, color=None):
    if color:
        return (COLOR['green'] +
               '+' + str(answer[0]).replace('\n', '\n+') + COLOR['reset'])
    else:
        return '+' + str(answer[0]).replace('\n', '\n+')

def removed(answer, color=None):
    if color:
        return (COLOR['red'] +
               '-' + str(answer[0]).replace('\n', '\n-') + COLOR['reset'])
    else:
        return '-' + str(answer[0]).replace('\n', '\n-')

def main():
    progname = os.path.basename(sys.argv[0])
    parser = argparse.ArgumentParser(prog=progname)

    parser._optionals.title = "Options"

    parser.add_argument("-V", "--version", dest="version", action="version",
                        version="%(prog)s: " + VERSION)

    parser.add_argument("-c", "--color", dest="color_enabled", action="store_true",
                        help="enable colorized output")

    parser.add_argument("-d", "--delay-max", dest="delay_max", metavar='SECONDS',
                        help="maximum number of seconds of delay to introduce" +
                             " between each request")

    parser.add_argument("-f", "--zonefile", dest="filename", required=True,
                        help="FILENAME is expected to be a valid zone master " +
                             "file\n" +
                             "https://tools.ietf.org/html/rfc1035#section-5")

    parser.add_argument("--from-ns", dest="nameserver1", required=True,
                        help="compare responses to NAMESERVER2")

    parser.add_argument("--to-ns", dest="nameserver2", required=True,
                        help="compare responses to NAMESERVER1")

    args = parser.parse_args()

    # required
    zonefile = args.filename
    ns1_name = args.nameserver1
    ns2_name = args.nameserver2

    delay_enabled = False

    if args.delay_max:
        delay_enabled = True
        delay_max = int(args.delay_max)

    # TODO: disable color if output is not a terminal
    color_enabled = args.color_enabled

    # relativize=False evaluates $ORIGIN and expands @
    # allow_include=False ignores $INCLUDE statements
    try:
       zone = dns.zone.from_file(zonefile, allow_include=False,
                                 relativize=False)

    except dns.exception.DNSException:
        sys.stderr.write(progname + ": Unable to import %s.\n\n" % zonefile)
        traceback.print_exc(file=sys.stderr)
        sys.exit(1)

    # TODO: IPv6 support with socket.getaddrinfo()
    ns1_addr = socket.gethostbyname(ns1_name)
    ns2_addr = socket.gethostbyname(ns2_name)

    seen_header = False

    for (rname, rdataset) in zone.iterate_rdatasets():
        rdtype = dns.rdatatype.to_text(rdataset.rdtype)
        query = dns.message.make_query(rname, rdtype)

        r1 = get_dns_response(query, ns1_addr, ns1_name, rname, rdtype)

        r2 = get_dns_response(query, ns2_addr, ns2_name, rname, rdtype)

        # To help avoid rate limits
        if delay_enabled:
            sleep(randint(0, delay_max))

        if r1.answer and r2.answer:
            if r1.answer[0] != r2.answer[0]:
                if not seen_header:
                    print("--- %s\n+++ %s" %
                          (ns1_name, ns2_name))
                    seen_header = True

                if color_enabled:
                    print(removed(r1.answer, color=True))
                    print(added(r2.answer, color=True))
                else:
                    print(removed(r1.answer))
                    print(added(r2.answer))

        elif r1.answer and not r2.answer:
           if color_enabled:
                print(removed(r1.answer, color=True))
           else:
                print(removed(r1.answer))

        elif r2.answer:
           if color_enabled:
                print(added(r2.answer, color=True))
           else:
                print(added(r2.answer))

        else:
            if color_enabled:
                sys.stderr.write("%s@@ NXDOMAIN from %s for %s %s @@\n%s" %
                                 (COLOR['cyan'], ns1_name, rname, rdtype,
                                  COLOR['reset']))

                sys.stderr.write("%s@@ NXDOMAIN from %s for %s %s @@\n%s" %
                                 (COLOR['cyan'], ns2_name, rname, rdtype,
                                  COLOR['reset']))

            else:
                sys.stderr.write("@@ NXDOMAIN from %s for %s %s @@\n" %
                                 (ns1_name, rname, rdtype))

                sys.stderr.write("@@ NXDOMAIN from %s for %s %s @@\n" %
                                 (ns2_name, rname, rdtype))

if __name__ == '__main__':
    main()
